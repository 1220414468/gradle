plugins {
    id 'java'
    id 'jacoco'
}

repositories {
    jcenter()
}

// A resolvable configuration to collect source code
def sourcesPath = jvm.createResolvableConfiguration('sourcesPath') {
    usingDependencyBucket('implementation')
    requiresAttributes {
        documentation('source-folders')
    }
}

// A resolvable configuration to collect JaCoCo coverage data
def coverageDataPath = jvm.createResolvableConfiguration('coverageDataPath') {
    usingDependencyBucket('implementation')
    requiresAttributes {
        documentation('jacoco-coverage-data')
    }
}

// Task to gather code coverage from multiple subprojects
def codeCoverageReport = tasks.register('codeCoverageReport', JacocoReport) {
    additionalClassDirs(configurations.runtimeClasspath)
    additionalSourceDirs(sourcesPath.incoming.artifactView { lenient(true) }.files)
    executionData(coverageDataPath.incoming.artifactView { lenient(true) }.files.filter { it.exists() })

    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
    }
}

// Make JaCoCo report generation part of the 'check' lifecycle phase
tasks.named("check") {
    dependsOn(codeCoverageReport)
}
