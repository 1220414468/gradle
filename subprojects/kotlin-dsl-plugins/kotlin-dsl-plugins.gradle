/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import gradlebuild.cleanup.WhenNotEmpty

plugins {
    id("gradlebuild.portalplugin.kotlin")
    id("gradlebuild.kotlin-dsl-plugin-extensions")
}

description = "Kotlin DSL Gradle Plugins deployed to the Plugin Portal"

group = "org.gradle.kotlin"
version = "1.3.7"

dependencies {
    compileOnly(project(":baseServices"))
    compileOnly(project(":logging"))
    compileOnly(project(":coreApi"))
    compileOnly(project(":modelCore"))
    compileOnly(project(":core"))
    compileOnly(project(":languageJvm"))
    compileOnly(project(":languageJava"))
    compileOnly(project(":plugins"))
    compileOnly(project(":pluginDevelopment"))
    compileOnly(project(":kotlinDsl"))

    compileOnly(libs.slf4jApi)
    compileOnly(libs.inject)

    implementation(libs.futureKotlin("stdlib-jdk8"))
    implementation(libs.futureKotlin("gradle-plugin"))
    implementation(libs.futureKotlin("sam-with-receiver"))

    integTestImplementation(project(":baseServices"))
    integTestImplementation(project(":logging"))
    integTestImplementation(project(":coreApi"))
    integTestImplementation(project(":modelCore"))
    integTestImplementation(project(":core"))
    integTestImplementation(project(":plugins"))
    integTestImplementation(project(":platformJvm"))
    integTestImplementation(project(":kotlinDsl"))
    integTestImplementation(project(":internalTesting"))
    integTestImplementation(testFixtures(project(":kotlinDsl")))
    integTestImplementation(libs.slf4jApi)
    integTestImplementation(libs.mockitoKotlin)

    integTestDistributionRuntimeOnly(project(":distributionsBasics")) {
        because("KotlinDslPluginTest tests against TestKit")
    }
    integTestLocalRepository(project)
}

classycle {
    excludePatterns.set(["org/gradle/kotlin/dsl/plugins/base/**"])
}

// plugins ------------------------------------------------------------
pluginPublish {
    bundledGradlePlugin(
        "embeddedKotlin",
        "Embedded Kotlin Gradle Plugin",
        "org.gradle.kotlin.embedded-kotlin",
        "org.gradle.kotlin.dsl.plugins.embedded.EmbeddedKotlinPlugin")

    bundledGradlePlugin(
        "kotlinDsl",
        "Gradle Kotlin DSL Plugin",
        "org.gradle.kotlin.kotlin-dsl",
        "org.gradle.kotlin.dsl.plugins.dsl.KotlinDslPlugin")

    bundledGradlePlugin(
        "kotlinDslBase",
        "Gradle Kotlin DSL Base Plugin",
        "org.gradle.kotlin.kotlin-dsl.base",
        "org.gradle.kotlin.dsl.plugins.base.KotlinDslBasePlugin")

    bundledGradlePlugin(
        "kotlinDslCompilerSettings",
        "Gradle Kotlin DSL Compiler Settings",
        "org.gradle.kotlin.kotlin-dsl.compiler-settings",
        "org.gradle.kotlin.dsl.plugins.dsl.KotlinDslCompilerPlugins")

    bundledGradlePlugin(
        "kotlinDslPrecompiledScriptPlugins",
        "Gradle Kotlin DSL Precompiled Script Plugins",
        "org.gradle.kotlin.kotlin-dsl.precompiled-script-plugins",
        "org.gradle.kotlin.dsl.plugins.precompiled.PrecompiledScriptPlugins")
}

// TODO:kotlin-dsl investigate
// See https://builds.gradle.org/viewLog.html?buildId=19024848&problemId=23230
tasks.noDaemonIntegTest.configure {
    enabled = false
}

// TODO:kotlin-dsl
testFilesCleanup {
    policy.set(WhenNotEmpty.REPORT)
}

// TODO: workaround for https://github.com/gradle/gradlecom/issues/627
//  which causes `publishPlugins` to fail with:
//  > java.io.FileNotFoundException: .../subprojects/kotlin-dsl-plugins/src/main/java (No such file or directory)
afterEvaluate {
    configurations.archives.allArtifacts.removeIf {
        it.name == "java"
    }
}
